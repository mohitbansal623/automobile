<?php

/**
* Implements hook_menu().
*/
function commerce_profile_common_menu() {
  $items['admin/config/media/gallery_images'] = array(
    'title' => 'Images from gallery',
    'description' => 'There are you can change image sizes for images from gallery.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_profile_common_admin_form'),
    'access arguments' => array('administer users'),
    'file' => 'commerce_profile_common.admin.inc',
    'type' => MENU_NORMAL_ITEM,  
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function commerce_profile_common_init() {
  $path = drupal_get_path('module', 'commerce_profile_common');
  drupal_add_js($path . '/js/commerce_profile_common.js');  
  $node = menu_get_object();
  if (isset($node) && $node->type == 'product') {
    drupal_add_js($path . '/js/commerce_profile_common_gallery.js');
    module_load_include('inc','commerce_profile_common','commerce_profile_common.admin');
    $screens = commerce_profile_common_get_screen_types();
    foreach ($screens as $screen => $array) {
      foreach ($array as $size => $value) {
        $name = $screen . '_' . $size . '_image';
        $image_parameters[$name] = variable_get($name, $value);
      }
    }
    drupal_add_js($image_parameters, 'setting');
  }
}

/**
 * Implements hook_page_alter().
 * @param array $data.
 */
function commerce_profile_common_page_alter(&$data) {  
  if (isset($data['content']['system_main']['nodes'])) {
    global $user;
    $nids = element_children($data['content']['system_main']['nodes']);
    $nid = $nids[0];
    if (isset($data['content']['system_main']['nodes'][$nid]['field_product'])){
      if ($user->uid == 0) {
        $comments = $data['content']['system_main']['nodes'][$nid]['links']['comment'];
      }
      else {
        $comments = $data['content']['system_main']['nodes'][$nid]['comments'];
      }
      $custom_tabs = array(
        array(
          'title' => t('Comments'),
          'contents' => $comments,
          'weight' => 2
        )
      );
      if (isset($data['content']['system_main']['nodes'][$nid]['product:field_description'])) {
        array_unshift($custom_tabs, array(
          'title' => t('Description'),
          'weight' => 0
        ));
      }
      if (isset($data['content']['system_main']['nodes'][$nid]['product:field_specifications'])) {
        array_unshift($custom_tabs, array(
          'title' => t('Specifications'),
          'weight' => 1
        ));
      }
      unset($data['content']['system_main']['nodes'][$nid]['comments']);
      unset($data['content']['system_main']['nodes'][$nid]['links']['comment']);
      $overrides = array('style' => 'nostyle', 'active' => 0); // Override some of the settings for the QuickTabs instance.

      $data['content']['quicktabs_product_information'] = array(
        'content' => quicktabs_build_quicktabs('node_activities', $overrides, $custom_tabs),
        '#weight' => -10,
      );
    }
  }
}

/**
 * Implements hook_node_view().
 * @param object $node.
 * @param string $view_mode.
 * @param string $langcode.
 */
function commerce_profile_common_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'product') {
    try {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      foreach ($node_wrapper->field_tags as $tag_wrapper) {
        $tag_wrapper->field_count = $tag_wrapper->field_count->value() + 1;
        $tag_wrapper->save();
      }
      foreach ($node_wrapper->field_category as $category_wrapper) {
        if (count(taxonomy_get_parents($category_wrapper->tid->value())) != 0) {
          $category_wrapper->field_count = $category_wrapper->field_count->value() + 1;
          $category_wrapper->save();
        }
      }
    }
    catch (Exception $error) {
      // Do nothing.
    }
  }
}

/**
 * Implements hook_block_view_alter().
 * @param array $data.
 * @param array $block.
 */
function commerce_profile_common_block_view_alter(&$data, $block) {
  if ($block->delta == 4) {
    $data['content'] = '<p>' . l(t('Shopping cart'), 'cart') . '</p>';
  }
  if ($block->delta == 7) {
    $data['content'] = '<p>' . l(t('Register'), 'user/register') . '&nbsp;|&nbsp;' . l(t('Sign in'), 'user') . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param array $form.
 * @param array $form_state.
 */
function commerce_profile_common_form_user_login_block_alter(&$form, $form_state) {
  $form['links']['#markup'] = '';
  $form['actions']['submit']['#value'] = t('Login');
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param array $form.
 * @param array $form_state.
 */
function commerce_profile_common_form_taxonomy_form_term_alter(&$form, &$form_state) {
  unset($form['field_count']);
}

/**
 * Implements hook_node_view_alter().
 * @param array $build.
 */
function commerce_profile_common_node_view_alter(&$build) {
  unset($build['comments']['comment_form']['subject']);
  $build['comments']['comment_form']['actions']['submit']['#value'] = t('SUBMIT');
  unset($build['comments']['comment_form']['actions']['preview']);
  hide($build['comments']['comment_form']['author']);
}